<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Speakeasy\SpeakeasyClientSDK\Models\Shared;


class TargetSDK
{
    /**
     * Remote commit ID.
     * 
     * @var ?string $commitHead
     */
	#[\JMS\Serializer\Annotation\SerializedName('commit_head')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $commitHead = null;
    
    /**
     * Timestamp when the event was created in the database.
     * 
     * @var \DateTime $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
    /**
     * Version of the generated target (post generation)
     * 
     * @var ?string $generateConfigPostVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('generate_config_post_version')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $generateConfigPostVersion = null;
    
    /**
     * gen.lock ID (expected to be a uuid).
     * 
     * @var ?string $generateGenLockId
     */
	#[\JMS\Serializer\Annotation\SerializedName('generate_gen_lock_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $generateGenLockId = null;
    
    /**
     * Indicates whether the target was considered published.
     * 
     * @var ?bool $generatePublished
     */
	#[\JMS\Serializer\Annotation\SerializedName('generate_published')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $generatePublished = null;
    
    /**
     * The target of the event.
     * 
     * @var string $generateTarget
     */
	#[\JMS\Serializer\Annotation\SerializedName('generate_target')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $generateTarget;
    
    /**
     * The version of the target.
     * 
     * @var ?string $generateTargetVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('generate_target_version')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $generateTargetVersion = null;
    
    /**
     * Current working directory relative to the git root.
     * 
     * @var ?string $gitRelativeCwd
     */
	#[\JMS\Serializer\Annotation\SerializedName('git_relative_cwd')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $gitRelativeCwd = null;
    
    /**
     * Default owner for git remote.
     * 
     * @var ?string $gitRemoteDefaultOwner
     */
	#[\JMS\Serializer\Annotation\SerializedName('git_remote_default_owner')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $gitRemoteDefaultOwner = null;
    
    /**
     * Default repository name for git remote.
     * 
     * @var ?string $gitRemoteDefaultRepo
     */
	#[\JMS\Serializer\Annotation\SerializedName('git_remote_default_repo')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $gitRemoteDefaultRepo = null;
    
    /**
     * Unique identifier for each event.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * Indicates whether the event was successful.
     * 
     * @var ?bool $success
     */
	#[\JMS\Serializer\Annotation\SerializedName('success')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $success = null;
    
	public function __construct()
	{
		$this->commitHead = null;
		$this->createdAt = new \DateTime();
		$this->generateConfigPostVersion = null;
		$this->generateGenLockId = null;
		$this->generatePublished = null;
		$this->generateTarget = "";
		$this->generateTargetVersion = null;
		$this->gitRelativeCwd = null;
		$this->gitRemoteDefaultOwner = null;
		$this->gitRemoteDefaultRepo = null;
		$this->id = "";
		$this->success = null;
	}
}
